services:
  config-server:
    build:
      context: ./config-server
    container_name: config-server
    ports:
      - "8088:8088"
    healthcheck:
      test: "curl -f localhost:8088/actuator/health || exit 1"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 2s
    networks:
      - microservices

  service-registry:
    build:
      context: ./service-registry
    container_name: service-registry
    ports:
      - "8761:8761"
    environment:
      - "SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8088"
    healthcheck:
      test: "curl -f localhost:8761/actuator/health || exit 1"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 2s
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - microservices

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "8060:8060"
    depends_on:
      orders-postgresql:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    networks:
      - microservices

  products-mongodb:
    image: "mongo:8.0.3"
    container_name: products-mongodb
    ports:
      - "27017:27017"
    volumes:
      - products-mongodb:/data/db
    healthcheck:
      test: "mongosh --eval 'db.adminCommand(\"ping\")' || exit 1"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 2s
    networks:
      - microservices

  carts-mongodb:
    image: "mongo:8.0.3"
    container_name: carts-mongodb
    ports:
      - "27018:27017"
    volumes:
      - carts-mongodb:/data/db
    healthcheck:
      test: "mongosh --eval 'db.adminCommand(\"ping\")' || exit 1"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 2s
    networks:
      - microservices

  orders-postgresql:
    image: "postgres:16.0-alpine"
    container_name: orders-postgresql
    ports:
      - "5432:5432"
    volumes:
      - orders-postgresql:/var/lib/postgresql/data
    environment:
      - "POSTGRES_USER=orders_user"
      - "POSTGRES_PASSWORD=orders_password"
      - "POSTGRES_DB=orders_db"
    healthcheck:
      test: "pg_isready -U orders_user -d orders_db"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 2s
    networks:
      - microservices

  product-service:
    build:
      context: ./product-service
    container_name: product-service
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      products-mongodb:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    environment:
      - "SPRING_DATA_MONGODB_DATABASE=products"
      - "SPRING_DATA_MONGODB_HOST=products-mongodb"
      - "SPRING_DATA_MONGODB_PORT=27017"
    networks:
      - microservices

  order-service:
    build:
      context: ./order-service
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      orders-postgresql:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    environment:
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://orders-postgresql:5432/orders_db"
      - "SPRING_DATASOURCE_USERNAME=orders_user"
      - "SPRING_DATASOURCE_PASSWORD=orders_password"
      - "CART-SERVICE_URL=http://cart-service:8083"
    networks:
      - microservices

  cart-service:
    build:
      context: ./cart-service
    container_name: cart-service
    ports:
      - "8083:8083"
    depends_on:
      config-server:
        condition: service_healthy
      carts-mongodb:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    environment:
      - "SPRING_DATA_MONGODB_DATABASE=carts"
      - "SPRING_DATA_MONGODB_HOST=carts-mongodb"
      - "SPRING_DATA_MONGODB_PORT=27017"
      - "PRODUCT-SERVICE_URL=http://product-service:8081"
    networks:
      - microservices

volumes:
  products-mongodb:
    driver: local
  carts-mongodb:
    driver: local
  orders-postgresql:
    driver: local

networks:
  microservices:
    driver: bridge